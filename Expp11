#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
} *front = NULL, *rear = NULL;

void enqueue(int x) {
    struct Node *t;
    t = (struct Node *)malloc(sizeof(struct Node));
    if (t == NULL)
        printf("Queue is Full\n");
    else {
        t->data = x;
        t->next = NULL;
        if (front == NULL)
            front = rear = t;
        else {
            rear->next = t;
            rear = t;
        }
    }
}

int dequeue() {
    int x = -1;
    struct Node *t;
    if (front == NULL)
        printf("Queue is Empty\n");
    else {
        x = front->data;
        t = front;
        front = front->next;
        free(t);
    }
    return x;
}

int isEmpty() {
    return front == NULL;
}

void BFS(int G[][7], int start, int n) {
    int i = start, j;
    int visited[7] = {0};
    printf("%d ", i);
    visited[i] = 1;
    enqueue(i);
    while (!isEmpty()) {
        i = dequeue();
        for (j = 0; j < n; j++) {
            if (G[i][j] == 1 && visited[j] == 0) {
                printf("%d ", j);
                visited[j] = 1;
                enqueue(j);
            }
        }
    }
}

void DFS(int G[][7], int start, int n, int visited[]) {
    int j;
    if (visited[start] == 0) {
        printf("%d ", start);
        visited[start] = 1;
        for (j = 0; j < n; j++) {
            if (G[start][j] == 1 && visited[j] == 0)
                DFS(G, j, n, visited);
        }
    }
}

int main() {
    int n, e, i, u, v, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    int G[n][n];
    
    // Initialize the adjacency matrix
    for (i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            G[i][j] = 0;

    printf("Enter the number of edges: ");
    scanf("%d", &e);
    printf("Enter the edges (u v):\n");
    for (i = 0; i < e; i++) {
        scanf("%d %d", &u, &v);
        G[u][v] = 1;
        G[v][u] = 1; // Assuming the graph is undirected
    }

    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &start);

    printf("BFS traversal starting from vertex %d:\n", start);
    BFS(G, start, n);

    printf("\nEnter the starting vertex for DFS: ");
    scanf("%d", &start);

    int visited[n];
    for (i = 0; i < n; i++)
        visited[i] = 0;

    printf("DFS traversal starting from vertex %d:\n", start);
    DFS(G, start, n, visited);

    return 0;
}
